- check internet connection
    - ping google.com
- install packages
    - sudo apt-get install nasm build-essential
- SLAE-code.zip
https://github.com/MarcoLugo/SLAE
https://github.com/fuzboxz/SLAE
https://github.com/hAxe1/SLAE
http://www.x0rsecurity.com/category/slae/
https://github.com/xMilkPowderx/SLAE-Code
https://github.com/prateek147/SLAE/tree/master/SLAE-Code
https://www.youtube.com/user/TheSecurityTube/videos
http://www.securitytube.net/
http://www.shell-storm.org/
http://exploit-db.com
http://www.projectshellcode.com/
http://www.commandlinefu.com/commands/view/6051/get-all-shellcode-on-binary-file-from-objdump

- lscpu
- cat /proc/cpuinfo

- General Pupose Registers (8)
    - eax, ebx, ecx, edx
    - ax => ah, al
    - esp, ebp, esi, edi
    - sp, bp, si, di (no h and l)
    
- eax - accumulator
- ebx - base register - data pointer
- ecx - counter
- edx - data pointer(I/O)
- esi, edi - data pointers for memory operations
- esp - stack pointer
- ebp - stack data pointer

- Segment registers (16bits)
    - cs - Code
    - ds - Data
    - ss - Stackyy
    
    - es - Data
    - fs - Data
    - gs - Data
    - gs - Data

- eip - Instruction Pointer (32 bits)

- FPU - Floating Point Unit or x87 (
    - ST0 - ST7 (80bits) like a stack

- Extensions
    - SIMD - Single Instruction Multiple Data
    - MMX
    - SSE
    - SSE2
    - SSE3
        - MMX Registers (64bits)
            - MM0 = low 64 bits of ST0
            ...
            - MM7 = low 64 bits of ST7
        - XMM Registers (128bits)
            - XMM0 - XMM7

- EFLAGS Register (S - Status, C - Control, X - System, R - Reserved)
    -  0 - CF S - Carry Flag
    -  1 - 1 R
    -  2 - PF S - Parity Flag
    -  3 - 0 R
    -  4 - AF S - Auxiliary Flag
    -  5 - 0 R
    -  6 - ZF S - Zero Flag
    -  7 - SF S - Sign Flag
    -  8 - TF X - Trap Flag
    -  9 - IF X - Iterrupt Enable Flag
    - 10 - DF C - Direction Flag
    - 11 - OF S - Overflow Flag
    - 13-12 X - IOPL - I/O Privilege Flag
    - 14 - NT X - Nested Task
    - 15 - 0 R
    - 16 - RF X - Resume Flag
    - 17 - VM X - Virtual-8086 Mode
    - 18 - AC X - Alignment Check
    - 19 - VIF X - Virtual Interrupt Flag
    - 20 - VIP X - Virtual Interrupt Pending
    - 21 - ID X - ID Flag
    - 22-31 - 0 R
    
GDB
http://www.securitytube.net/tags/sgde
    - info functions
    - info variables
    - shell readelf -h ELFFILE
    - break main
    - run
    - info registerss
    - info all-registers
    - CTRL+L - clear screen
    - set disassembly-flavor intel
    - x/s ADDRESS - display string at ADDRESS
    - x/LxF &VARIABLE - display L bytes from VARIABLE address onwards in F format (b => byte, w => word)
    
    
CPU Modes
    - Real Mode
    - Protected Mode
    - System Management Mode

Segment Descriptors
    - GDT - Global
    - LDT - Local
    - IDT - Interrupt

Virtual Memory Model
    - 1GB - Kernal
    - 3GB - User Space
    - locations
        - Kernel Space - 0xffffffff - 0xc0000000
        - Stack - Function Args + Local Vars
        - Shared Libs + Mappings
        - Heap - Dynamic Memory
        - BSS - Uninitialized Data
        - Data - Initialized Data
        - Text - Program Code - ... - 0x08048000
        - 0x00000000


Map process
    - cat /proc/PID/maps
    - pmap PID
    - gdb (when break) - infor proc mappings

Instruction Sets
    - General Purpose
    - x87 FPU
    - MMX / SSE / SS#2-4

VDSO - Virtual Dynamic Shared Object
IDS - Intrusion Detection System
http://articles.manugarg.com/systemcallinlinux2_6.html

System Interrupts
/usr/include/x86_64-linux-gnu/asm/unistd_32.h

- Interrupt 0x80 parameter location
    - eax - call number - where the return value will be
    - ebx - 1st argument
    - ecx - 2nd argument
    - edx - 3rd argument
    - esi - 4th argument
    - edi - 5th argument

nasm -f elf32 -o HelloWorld.o HelloWorld.asm
nasm -f elf64 -o HelloWorld.o HelloWorld.asm
ld -o HelloWorld HelloWorld.o

Data Types
    - Byte - 8 bits
    - Word - 16 bits
    - Double Word - 32 bits
    - Quad Word - 64 bits
    - Double Quad Word - 128 bits

NASM
https://www.nasm.us/doc/
    - db - define byte
    - dw - define word
    - dd - define double
    - dq - define quad
    - dt - define extended float
    - resb X - reserve X number of bytes
    - resw X - reserve X number of words
    - $ - current instruction address
    - $$ - start of current section
    - times X INSTRUCTION - repeat INSTRUCTION X times
    - lea TARGET, [LABEL] - Load Effective Address
    - xchg REGMEM1, REGMEM2 - swap values
    - Arithmethic
        - add DESTINATION, SOURCE
        - adc DESTINATION, SOURCE (add carry to result)
        - sub, sbb (subtract and borrow carry)
        - inc, dec
        - mul (OF and CF set if upper half or result is non-zero)
            - 8bit - implied operand al - result in ax
            - 16bit - implied operand ax - result in dx.ax
            - 32bit - implied operand eax - result in edx.eax
        - div
            - 16bit - dividend ax - quocient al - remain ah
            - 32bit - dividend dx.ax - quocient ax - remain dx
            - 64bit - dividended edx.eax - quocient eax - remain edx
        - imul, idiv - signed multiplication and division
    - Logic Operations
        - and (r-r, r-m, m-r, r-i, m-i)
        - or
        - xor
        - not
    - Control Instructions
        - Branching
            - jmp - unconditional jump
                - near - -128 - +127
                - far
            - jXX - conditional jump depending on XX
        - Procedure
            - call, return
            - Arguments
                - via registers
                - via stack
                - via data strcutures pointed to by registers or stack
            - Keeping state
                - pushad, popad - store and restore registers in the stack
                - pushfd, popfd - store and restore flags in the stack
            - Prologue
                - push ebp
                - mov ebp, esp
            - Epilogue
                - mov esp, ebp
                - pop ebp
                - or just: leave





